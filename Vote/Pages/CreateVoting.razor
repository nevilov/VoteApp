@page "/CreateVoting"


<div>
    <EditForm Model="@Options" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInValidSubmit">
        <div class="alert @StatusClass">@StatusMessage</div>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h2>New voting</h2>
        <div class="input-group mb-3">
            <div class="create_voting">
                <div class="input voting">
                    <input class="form-control"
                           @bind="Options.TitleVoting"
                           type="text"
                           placeholder="Title"
                           aria-describedby="button-addon1"
                           maxlength="50" />
                    <ValidationMessage For="@(() => Options.TitleVoting)" />
                </div>
                <div class="input voting">
                    <textarea class="form-control"
                              @bind="Options.DescriptionVoting"
                              id="exampleFormControlTextarea1"
                              placeholder="Description"
                              rows="3"
                              maxlength="250" />
                    <ValidationMessage For="@(() => Options.DescriptionVoting)" />
                </div>
                <div class="input voting">
                    <input class="form-control"
                           @bind="Options.Start_dateVoting"
                           placeholder="Start Date"
                           min="2020-01-01"
                           max="2200-01-01"
                           type="date" />
                </div>
                <div class="input voting">
                    <input class="form-control"
                           @bind="Options.End_dateVoting"
                           placeholder="End Date"
                           min="2020-01-01"
                           max="2200-01-01"
                           type="date" />
                </div>
                <div class="input voting">

                    <input class="form-control"
                           type="text"
                           @bind="itemOption"
                           placeholder="Voting Option"
                           maxlength="50" />


                </div>
                @foreach (var option in listOptions) {
                    <div class="input voting">
                        <input class="form-control"
                               type="text"
                               @bind="itemOption"
                               placeholder="Voting Option"
                               maxlength="50" />
                    </div>
                }
                <div class="AddOption button">
                    <button type="button"
                            style="margin-left:10px; width: 25%;"
                            @onclick="AddOption"
                            class="@Options.propertyOptionButton">
                        @Options.additionalOption
                    </button>
                </div>
                <div class="create voting button">
                    <button type="submit" class="btn btn-success" onclick="Options.Submit" style="font-size: 25px;">Save</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private OptionVoting Options = new OptionVoting();
    private IList<AddOptions> listOptions = new List<AddOptions>();

    public string StatusMessage;
    public string StatusClass;
    protected void HandleValidSubmit() {
        StatusClass = "alert-info";
        StatusMessage = DateTime.Now + " HandleValid submit";
    }
    protected void HandleInValidSubmit() {
        StatusClass = "alert-info";
        StatusMessage = DateTime.Now + " HandleInValid submit";
    }

    public string itemOption { get; set; }
    public void AddOption() {

        if (!string.IsNullOrWhiteSpace(itemOption)) {
            listOptions.Add(new AddOptions { Option = itemOption });
            itemOption = string.Empty;
        }



        //if (Options.haveOption) {
        //    Options.haveOption = false;
        //    Options.additionalOption = "+ Add option";
        //    Options.propertyOptionButton = "btn btn-outline-secondary";
        //} else {
        //    Options.haveOption = true;
        //    Options.additionalOption = "Hide option";
        //    Options.propertyOptionButton = "btn btn-outline-danger";
        //}
    }


    // public IList<OptionVoting> optionVoting = new List<OptionVoting>();




}
